/**
 * @author Marat Vyshegorodtsev
 * @license BSD-3-Clause
 * For full license text, see LICENSE file in the repo root
 * or https://opensource.org/licenses/BSD-3-Clause
 */
// TODO port ES6, ES7 tests from acorn

module.exports = [
	'this\n',
	'null\n',
	'\n    42\n\n',
	'/foobar/',
	'/[a-z]/g',
	'(1 + 2 ) * 3',
	'(1 + 2 ) * 3',
	'(x = 23)',
	'x = []',
	'x = [ ]',
	'x = [ 42 ]',
	'x = [ 42, ]',
	'x = [ ,, 42 ]',
	'x = [ 1, 2, 3, ]',
	'x = [ 1, 2,, 3, ]',
	'日本語 = []',
	'T‿ = []',
	'T‌ = []',
	'T‍ = []',
	'ⅣⅡ = []',
	'ⅣⅡ = []',
	'x = {}',
	'x = { }',
	'x = { answer: 42 }',
	'x = { if: 42 }',
	'x = { true: 42 }',
	'x = { false: 42 }',
	'x = { null: 42 }',
	'x = { "answer": 42 }',
	'x = { x: 1, x: 2 }',
	'x = { get width() { return m_width } }',
	'x = { get undef() {} }',
	'x = { get if() {} }',
	'x = { get true() {} }',
	'x = { get false() {} }',
	'x = { get null() {} }',
	'x = { get "undef"() {} }',
	'x = { get 10() {} }',
	'x = { set width(w) { m_width = w } }',
	'x = { set if(w) { m_if = w } }',
	'x = { set true(w) { m_true = w } }',
	'x = { set false(w) { m_false = w } }',
	'x = { set null(w) { m_null = w } }',
	'x = { set "null"(w) { m_null = w } }',
	'x = { set 10(w) { m_null = w } }',
	'x = { get: 42 }',
	'x = { set: 43 }',
	'/* block comment */ 42',
	'42 /*The*/ /*Answer*/',
	'42 /*the*/ /*answer*/',
	'/* multiline\ncomment\nshould\nbe\nignored */ 42',
	'/*a\r\nb*/ 42',
	'/*a\rb*/ 42',
	'/*a\nb*/ 42',
	'/*a\nc*/ 42',
	'// line comment\n42',
	'42 // line comment',
	'// Hello, world!\n42',
	'// Hello, world!\n',
	'// Hallo, world!\n',
	'//\n42',
	'//',
	'// ',
	'/**/42',
	'// Hello, world!\n\n//   Another hello\n42',
	'if (x) { // Some comment\ndoThat(); }',
	'switch (answer) { case 42: /* perfect */ bingo() }',
	'0',
	'3',
	'5',
	'42',
	'.14',
	'3.14159',
	'6.02214179e+23',
	'1.492417830e-10',
	'0x0',
	'0e+100',
	'0xabc',
	'0xdef',
	'0X1A',
	'0x10',
	'0x100',
	'0X04',
	'02',
	'012',
	'0012',
	'"Hello"',
	"\"\\n\\r\\t\\v\\b\\f\\\\\\'\\\"\\0\"",
	'"\\u0061"',
	'"\\x61"',
	'"Hello\\nworld"',
	'"Hello\\\nworld"',
	'"Hello\\02World"',
	'"Hello\\012World"',
	'"Hello\\122World"',
	'"Hello\\0122World"',
	'"Hello\\312World"',
	'"Hello\\412World"',
	'"Hello\\812World"',
	'"Hello\\712World"',
	'"Hello\\0World"',
	'"Hello\\\r\nworld"',
	'"Hello\\1World"',
	'var x = /[a-z]/i',
	'var x = /[x-z]/i',
	'var x = /[a-c]/i',
	'var x = /[P QR]/i',
	'var x = /foo\\/bar/',
	'var x = /=([^=\\s])+/g',
	'var x = /[P QR]/\\u0067',
	'new Button',
	'new Button()',
	'new new foo',
	'new new foo()',
	'new foo().bar()',
	'new foo[bar]',
	'new foo.bar()',
	'( new foo).bar()',
	'foo(bar, baz)',
	'(    foo  )()',
	'universe.milkyway',
	'universe.milkyway.solarsystem',
	'universe.milkyway.solarsystem.Earth',
	'universe[galaxyName, otherUselessName]',
	'universe[galaxyName]',
	'universe[42].galaxies',
	'universe(42).galaxies',
	'universe(42).galaxies(14, 3, 77).milkyway',
	'earth.asia.Indonesia.prepareForElection(2014)',
	'universe.if',
	'universe.true',
	'universe.false',
	'universe.null',
	'x++',
	'x--',
	'eval++',
	'eval--',
	'arguments++',
	'arguments--',
	'++x',
	'--x',
	'++eval',
	'--eval',
	'++arguments',
	'--arguments',
	'+x',
	'-x',
	'~x',
	'!x',
	'void x',
	'delete x',
	'typeof x',
	'x * y',
	'x / y',
	'x % y',
	'x + y',
	'x - y',
	'x << y',
	'x >> y',
	'x >>> y',
	'x < y',
	'x > y',
	'x <= y',
	'x >= y',
	'x in y',
	'x instanceof y',
	'x < y < z',
	'x == y',
	'x != y',
	'x === y',
	'x !== y',
	'x & y',
	'x ^ y',
	'x | y',
	'x + y + z',
	'x - y + z',
	'x + y - z',
	'x - y - z',
	'x + y * z',
	'x + y / z',
	'x - y % z',
	'x * y * z',
	'x * y / z',
	'x * y % z',
	'x % y * z',
	'x << y << z',
	'x | y | z',
	'x & y & z',
	'x ^ y ^ z',
	'x & y | z',
	'x | y ^ z',
	'x | y & z',
	'x || y',
	'x && y',
	'x || y || z',
	'x && y && z',
	'x || y && z',
	'x || y ^ z',
	'y ? 1 : 2',
	'x && y ? 1 : 2',
	'x = 42',
	'eval = 42',
	'arguments = 42',
	'x *= 42',
	'x /= 42',
	'x %= 42',
	'x += 42',
	'x -= 42',
	'x <<= 42',
	'x >>= 42',
	'x >>>= 42',
	'x &= 42',
	'x ^= 42',
	'x |= 42',
	'{ foo }',
	'{ doThis(); doThat(); }',
	'{}',
	'var x',
	'var await',
	'var x, y;',
	'var x = 42',
	'var eval = 42, arguments = 42',
	'var x = 14, y = 3, z = 1977',
	'var implements, interface, package',
	'var private, protected, public, static',
	';',
	'x',
	'x, y',
	'\\u0061',
	'a\\u0061',
	'if (morning) goodMorning()',
	'if (morning) (function(){})',
	'if (morning) var x = 0;',
	'if (morning) function a(){}',
	'if (morning) goodMorning(); else goodDay()',
	'do keep(); while (true)',
	'do keep(); while (true);',
	'do { x++; y--; } while (x < 10)',
	'{ do { } while (false);false }',
	'while (true) doSomething()',
	'while (x < 10) { x++; y--; }',
	'for(;;);',
	'for(;;){}',
	'for(x = 0;;);',
	'for(var x = 0;;);',
	'for(var x = 0, y = 1;;);',
	'for(x = 0; x < 42;);',
	'for(x = 0; x < 42; x++);',
	'for(x = 0; x < 42; x++) process(x);',
	'for(x in list) process(x);',
	'for (var x in list) process(x);',
	'for (var x = 42 in list) process(x);',
	'for (var i = function() { return 10 in [] } in list) process(x);',
	'while (true) { continue; }',
	'while (true) { continue }',
	'done: while (true) { continue done }',
	'done: while (true) { continue done; }',
	'while (true) { break }',
	'done: while (true) { break done }',
	'done: while (true) { break done; }',
	'target1: target2: while (true) { continue target1; }',
	'target1: target2: target3: while (true) { continue target1; }',
	'(function(){ return })',
	'(function(){ return; })',
	'(function(){ return x; })',
	'(function(){ return x * y })',
	'with (x) foo = bar',
	'with (x) foo = bar;',
	"'use\\x20strict'; with (x) foo = bar;",
	'"use\\x20strict"; with (x) foo = bar;',
	'with (x) { foo = bar }',
	'switch (x) {}',
	'switch (answer) { case 42: hi(); break; }',
	'switch (answer) { case 42: hi(); break; default: break }',
	'start: for (;;) break start',
	'start: while (true) break start',
	'throw x;',
	'throw x * y',
	'throw { message: "Error" }',
	'try { } catch (e) { }',
	'try { } catch (eval) { }',
	'try { } catch (arguments) { }',
	'try { } catch (e) { say(e) }',
	'try { } finally { cleanup(stuff) }',
	'try { doThat(); } catch (e) { say(e) }',
	'try { doThat(); } catch (e) { say(e) } finally { cleanup(stuff) }',
	'debugger;',
	'function hello() { sayHi(); }',
	'function eval() { }',
	'function arguments() { }',
	'function test(t, t) { }',
	'(function test(t, t) { })',
	'function eval() { function inner() { "use strict" } }',
	'function hello(a) { sayHi(); }',
	'function hello(a, b) { sayHi(); }',
	'function hello(...rest) { }',
	'function hello(a, ...rest) { }',
	'var hi = function() { sayHi() };',
	'var hi = function (...r) { sayHi() };',
	'var hi = function eval() { };',
	'var hi = function arguments() { };',
	'var hello = function hi() { sayHi() };',
	'(function(){})',
	'{ x\n++y }',
	'{ x\n--y }',
	'var x /* comment */;',
	'{ var x = 14, y = 3\nz; }',
	'while (true) { continue\nthere; }',
	'while (true) { continue // Comment\nthere; }',
	'while (true) { continue /* Multiline\nComment */there; }',
	'while (true) { break\nthere; }',
	'while (true) { break // Comment\nthere; }',
	'while (true) { break /* Multiline\nComment */there; }',
	'(function(){ return\nx; })',
	'(function(){ return // Comment\nx; })',
	'(function(){ return/* Multiline\nComment */x; })',
	'{ throw error\nerror; }',
	'{ throw error// Comment\nerror; }',
	'{ throw error/* Multiline\nComment */error; }',
	'',
	'foo: if (true) break foo;',
	"(function () {\n 'use strict';\n '\0';\n}())",
	'123..toString(10)',
	'123.+2',
	'a\u2028b',
	"'a\\u0026b'",
	'foo: 10; foo: 20;',
	'if(1)/  foo/',
	'price_9̶9̶_89',
	"function hello() { 'use strict'; \"\\0\"; }",
	'var a = 1;',
	'a.in / b',
	// 'return {} / 2',
	// 'return\n{}\n/foo/',
	'+{} / 2',
	'{}\n/foo/',
	'x++\n{}\n/foo/',
	'{{}\n/foo/}',
	'while (1) /foo/',
	'while (1) {} /foo/',
	'(1) / 2',
	'({a: [1]}+[]) / 2',
	'{[1]}\n/foo/',
	'switch(a) { case 1: {}\n/foo/ }',
	'({1: {} / 2})',
	'+x++ / 2',
	'foo.in\n{}\n/foo/',
	'var x = function f() {} / 3;',
	'+function f() {} / 3;',
	'foo: function x() {} /regexp/',
	'x = {foo: function x() {} / divide}',
	'foo; function f() {} /regexp/',
	'{function f() {} /regexp/}',
	'{}/=/',
	'foo <!--bar\n+baz',
	'x = y-->10;\n --> nothing',
	"'use strict';\nobject.static();",
	'let++',
	'let x',
	'let x, y;',
	'let x = 42',
	'let eval = 42, arguments = 42',
	'let x = 14, y = 3, z = 1977',
	'for(let x = 0;;);',
	'for(let x = 0, y = 1;;);',
	'for (let x in list) process(x);',
	'const x = 42',
	'const eval = 42, arguments = 42',
	'const x = 14, y = 3, z = 1977',
	'for(const x = 0;;);',
	'<!--\n;',
	"\nfunction plop() {\n'use strict';\n/* Comment */\n}",
	'// line comment',
	'<!-- HTML comment',
	';\n--> HTML comment',
	'var x = (1 + 2)',
	"function f(f) { 'use strict'; }",
	// '#!/usr/bin/node\n;',
	'(function () {} / 1)',
	'function f() {} / 1 /',
	'do /x/; while (false);',
	'/[a-z]/gim',
	'0123. in/foo/i',
	'undefined',
	'(foo = [])[0] = 4;',
	'for ((foo = []).bar in {}) {}',
	'((b), a=1)',
	'(x) = 1',
	'try {} catch (foo) {} var foo;',
	'try {} catch (foo) {} let foo;',
	'try {} catch (foo) { { let foo; } }',
	'try {} catch (foo) { function x() { var foo; } }',
	'try {} catch (foo) { function x(foo) {} }',
	"'use strict'; let foo = function foo() {}",
]

// export default {
// 	'null\n': {
// 		type: 'Program',
// 		sourceType: 'script',
// 		start: 0,
// 		end: 5,
// 		loc: {
// 			start: {
// 				line: 1,
// 				column: 0,
// 			},
// 			end: {
// 				line: 2,
// 				column: 0,
// 			},
// 		},
// 		body: [
// 			{
// 				type: 'ExpressionStatement',
// 				start: 0,
// 				end: 4,
// 				loc: {
// 					start: {
// 						line: 1,
// 						column: 0,
// 					},
// 					end: {
// 						line: 1,
// 						column: 4,
// 					},
// 				},
// 				expression: {
// 					type: 'Literal',
// 					start: 0,
// 					end: 4,
// 					loc: {
// 						start: {
// 							line: 1,
// 							column: 0,
// 						},
// 						end: {
// 							line: 1,
// 							column: 4,
// 						},
// 					},
// 					value: null,
// 					raw: 'null',
// 				},
// 			},
// 		],
// 	},
//
// }
